// A partial copy of the protobuf from prysmaticlabs/prysm.
syntax = "proto3";
package ethereum.beacon.rpc.v1;
import "google/protobuf/empty.proto";

service BeaconService {
  rpc BlockTree(google.protobuf.Empty) returns (BlockTreeResponse);
}

message BlockTreeResponse {
  repeated TreeNode tree = 1;
  message TreeNode {
    BeaconBlock block = 1;
    bytes block_root = 2;
    uint64 participated_votes = 3;
    uint64 total_votes = 4;
  }
}

message BeaconBlock {
  uint64 slot = 1 [jstype = JS_STRING];
  bytes parent_root_hash32 = 2;
  bytes state_root_hash32 = 3;
  bytes randao_reveal = 4;
  Eth1Data eth1_data = 5;
  bytes signature = 6; // bytes96
  // Block Body
  BeaconBlockBody body = 7;
}

message BeaconBlockBody {
  repeated Attestation attestations = 1;
  repeated ProposerSlashing proposer_slashings = 2;
  repeated AttesterSlashing attester_slashings = 3;
  repeated Deposit deposits = 4;
  repeated VoluntaryExit voluntary_exits = 5;
}

message Attestation {
  AttestationData data = 1;
  bytes aggregation_bitfield = 2;
  bytes custody_bitfield = 3;
  bytes aggregate_signature = 4; // Type of [uint384] ?
}

message AttestationData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes beacon_block_root_hash32 = 3;
  bytes epoch_boundary_root_hash32 = 4;
  bytes crosslink_data_root_hash32 = 5;
  Crosslink latest_crosslink = 6;
  uint64 justified_epoch = 7;
  bytes justified_block_root_hash32 = 8;
}

message ProposalSignedData {
  uint64 slot = 1;
  uint64 shard = 2;
  bytes block_root_hash32 = 3;
}

message SlashableAttestation {
  repeated uint64 validator_indices = 1;
  bytes custody_bitfield = 2;
  AttestationData data = 3;
  bytes aggregate_signature = 4; // bytes96
}

message ProposerSlashing {
  uint64 proposer_index = 1;
  ProposalSignedData proposal_data_1 = 2;
  bytes proposal_signature_1 = 3; // bytes96
  ProposalSignedData proposal_data_2 = 4;
  bytes proposal_signature_2 = 5;
}

message AttesterSlashing {
  SlashableAttestation slashable_attestation_1 = 1;
  SlashableAttestation slashable_attestation_2 = 2;
}

message Crosslink {
  uint64 epoch = 1;
  bytes crosslink_data_root_hash32 = 2;
}

message Deposit {
  repeated bytes merkle_proof_hash32s = 1;
  uint64 merkle_tree_index = 2;
  bytes deposit_data = 3;
}

message VoluntaryExit {
  uint64 epoch = 1;
  uint64 validator_index = 2;
  bytes signature = 3; // bytes96
}

message Eth1Data {
  bytes deposit_root_hash32 = 1;
  bytes block_hash32 = 2;
}

message Eth1DataVote {
  Eth1Data eth1_data = 1;
  uint64 vote_count = 2;
}
